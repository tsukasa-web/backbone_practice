// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";

  /*
  Todo Model
  -------------------
   */
  var App, AppView, ToDo, ToDoList, ToDoView, Todos;

  ToDo = Backbone.Model.extend({
    defaults: function() {
      return {
        title: 'empty todo ...',

        /*taskの期限 */
        deadline: 'empty deadline ...',

        /*taskの優先度 */
        priority: 'normal',

        /*次のModelの順番の格納 */
        order: Todos.nextOrder(),

        /*checkのstate */
        done: false,

        /*editのstate */
        editing: false
      };
    },

    /*doneを反転して保存 */
    toggle: function() {
      return this.save({
        done: !this.get('done')
      });
    }
  });


  /*
  Todo Collection
  -------------------
   */

  ToDoList = Backbone.Collection.extend({
    model: ToDo,
    sortAttribute: "order",
    sortDirection: 1,

    /*Modelをsort_keyの順に並べる */
    comparator: function(a, b) {
      var _ref, _ref1;
      a = a.get(this.sortAttribute);
      b = b.get(this.sortAttribute);
      if (a === b) {
        return 0;
      }
      if (this.sortDirection === 1) {
        return (_ref = a > b) != null ? _ref : {
          1: -1
        };
      } else {
        return (_ref1 = a < b) != null ? _ref1 : {
          1: -1
        };
      }
    },

    /*LocalStorageへの保存 */
    localStorage: new Backbone.LocalStorage('todos-backbone'),

    /*完了チェックが入ったToDoを返す */
    done: function() {
      return this.where({
        done: true
      });
    },

    /*完了チェックが入っていないToDoを返す */
    remaining: function() {
      return this.where({
        done: false
      });
    },

    /*次のModelの順番 */
    nextOrder: function() {
      if (!this.length) {
        return 1;
      }
      return this.last().get('order') + 1;
    },
    sortByField: function(fieldName) {
      this.sortAttribute = fieldName;
      return this.sort();
    }
  });

  Todos = new ToDoList;


  /*
  Todo Item View
  -------------------
   */

  ToDoView = Backbone.View.extend({
    tagName: 'li',

    /*html上のテンプレートを宣言 */
    template: _.template($('#item-template').html()),
    events: {
      'click .toggle': 'toggleDone',
      'dblclick .view': 'edit',
      'click a.destroy': 'clear',
      'keypress .edit-title': 'updateOnEnter',
      'click .edit-save': 'close'
    },
    initialize: function() {

      /*Todoに変更イベントを設定 */
      this.listenTo(this.model, 'change', this.render);

      /*Todoに削除イベントを設定 */
      return this.listenTo(this.model, 'destroy', this.remove);
    },
    render: function() {

      /*modelをJSONに変換してテンプレートに渡す */
      this.$el.html(this.template(this.model.toJSON()));

      /*doneのクラスを持っているmodelのclassをtoggleによって外す */
      this.$el.toggleClass('done', this.model.get('done'));

      /*priorityの値をクラスとして付加 */
      this.$el.addClass(this.model.get('priority'));

      /*priorityの値をedit-radio-listに反映 */
      this.$el.find("input[name='edit-priority']").val([this.model.get('priority')]);

      /*オブジェクトとしてmodelの.edit-titleを保存 */
      this.inputTitle = this.$('.edit-title');

      /*オブジェクトとしてmodelの.edit-deadlineを保存 */
      this.inputDeadline = this.$('.edit-deadline');

      /*オブジェクトとしてmodelの.edit-radio-listを保存 */
      this.inputPriority = this.$("input[name='edit-priority']");
      return this;
    },

    /*対象modelのdoneを反転させる */
    toggleDone: function() {
      return this.model.toggle();
    },

    /*対象modelを編集中の状態に変更する */
    edit: function() {
      this.model.edit = true;
      this.$el.addClass('editing');
      return this.inputTitle.focus();
    },

    /*Enterを押した際にcloseする */
    updateOnEnter: function(e) {
      if (e.keyCode === 13) {
        return this.close();
      }
    },

    /*無記入ならclear、記入済みなら値を保存して編集状態を解除する */
    close: function(e) {
      var valueDeadline, valuePriority, valueTitle;
      e.preventDefault;
      valueTitle = this.inputTitle.val();
      valueDeadline = this.inputDeadline.val();
      valuePriority = this.inputPriority.filter(':checked').val();
      if (!valueDeadline) {
        return alert('Input Deadline');
      } else if (!valueTitle) {
        return this.clear();
      } else {
        this.model.edit = false;
        this.model.save({
          title: valueTitle,
          deadline: valueDeadline,
          priority: valuePriority
        });
        return this.$el.removeClass('editing');
      }
    },

    /*対象modelを削除 */
    clear: function() {
      return this.model.destroy();
    }
  });


  /*
  App View is the top-level piece of UI.
  -------------------
   */

  AppView = Backbone.View.extend({
    el: $('#todoapp'),

    /*html上のテンプレートを宣言 */
    statsTemplate: _.template($('#stats-template').html()),
    events: {
      'click #new-save': 'createOnEnter',
      'click #clear-completed': 'clearCompleted',
      'click #toggle-all': 'toggleAllComplete',
      'click #sort-add': 'sortAdd',
      'click #sort-deadline': 'sortDeadline',
      'click #sort-priority': 'sortPriority'
    },
    initialize: function() {
      this.list = this.$("#todo-list");
      this.inputTitle = this.$('#new-todo');
      this.inputDeadline = this.$('#new-deadline');
      this.inputPriority = this.$("input[name='priority']");
      this.allCheckbox = this.$('#toggle-all')[0];
      this.listenTo(this.collection, 'add', this.addOne);
      this.listenTo(this.collection, 'sort', this.reorder);
      this.listenTo(this.collection, 'all', this.render);
      this.footer = this.$('footer');
      this.main = $('#main');
      return this.collection.fetch();
    },
    render: function() {

      /*チェック済みmodelの数を取得 */
      var done, remaining;
      done = this.collection.done().length;

      /*未チェックmodelの数を取得 */
      remaining = this.collection.remaining().length;
      if (Todos.length) {

        /*Todoリストにタスクが入っている場合 */
        this.main.show();
        this.footer.show();

        /*現状のチェック状態をテンプレートに渡す */
        this.footer.html(this.statsTemplate({
          done: done,
          remaining: remaining
        }));
      } else {

        /*Todoリストにタスクが入っていない場合 */
        this.main.hide();
        this.footer.hide();
      }

      /*remainingが無い場合はallCheckboxにチェックを入れた状態にする */
      return this.allCheckbox.checked = !remaining;
    },

    /*モデルを追加してリストをレンダリング */
    addOne: function(todo) {
      var view;
      view = new ToDoView({
        model: todo
      });
      return this.$('#todo-list').append(view.render().el);
    },
    reorder: function() {
      this.list.html('');
      return this.addAll();
    },

    /*reset時に全部再レンダリング */
    addAll: function() {
      return this.collection.each(this.addOne, this);
    },
    sortAdd: function() {
      return this.collection.sortByField('order');
    },
    sortDeadline: function() {
      return this.collection.sortByField('deadline');
    },
    sortPriority: function() {
      return this.collection.sortByField('priority');
    },
    createOnEnter: function(e) {

      /*空欄またはEnter押下時はreturn */
      if (!this.inputTitle.val() || !this.inputDeadline.val()) {
        return;
      }

      /*値をtitleにしてTodoに追加（この時addも発火） */
      this.collection.create({
        title: this.inputTitle.val(),
        deadline: this.inputDeadline.val(),
        priority: this.inputPriority.filter(':checked').val()
      });
      return this.inputTitle.val('');
    },

    /*全モデルをチェック状態に変更 */
    toggleAllComplete: function() {
      var done;
      done = this.allCheckbox.checked;
      this.collection.each(function(todo) {
        todo.save({
          'done': done
        });
      });
    },

    /*チェック済みのモデルをdestroy */
    clearCompleted: function() {
      return _.invoke(this.collection.done(), 'destroy');
    }
  });

  App = new AppView({
    collection: Todos
  });

}).call(this);
